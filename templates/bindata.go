// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// readme.tpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xdf\x6f\x22\x37\x10\xc7\xdf\xfd\x57\x8c\x44\x1f\x02\x0a\xcb\x3b\x51\x2b\x45\x49\xab\x46\xa5\x55\x94\x90\x4a\x15\x42\xda\xc9\xee\xc0\xba\xf1\xda\xae\x3d\x4b\x8a\x10\xff\xfb\xc9\xf6\xb2\x2c\x24\xd1\xdd\xbd\xdc\xdd\x1b\x3b\x66\x7e\x7d\x3f\xdf\x19\xc0\x6e\x07\xd9\xbd\x33\xff\x52\xc1\xd9\x63\x65\x1c\xff\x85\x35\xc1\x7e\x2f\xc4\xa2\xff\xd4\x46\x97\x17\xfd\xe0\xd3\xc3\x0c\xf6\xfb\x21\x8c\x4f\xaa\xdc\x92\x2f\x9c\xb4\x2c\x8d\x8e\x75\x06\x03\x98\xcf\xae\x6e\x1f\xae\x84\xc8\xf3\xbc\x30\xda\x1b\x45\xe2\x27\xa8\x48\xd5\xe0\xc8\x1a\xc0\xb2\x8c\x15\x1e\xc8\x1a\x2f\xd9\xb8\xed\xa1\xdf\x79\x38\x75\x3c\x49\x6e\x6c\x89\xdc\xd5\x93\xda\x33\x2a\xd5\xe6\x29\x42\x4f\x1f\xd5\x6a\xc3\x93\x10\xbe\xa9\xd0\x75\x4b\xc2\x58\xbf\xc9\xf7\x16\x8b\x28\x4b\x9e\xe7\x71\xa5\x3b\xcd\xce\x94\x4d\x11\xd6\x14\x62\x5e\x49\x0f\x45\x28\x02\x25\x59\x65\xb6\xfe\x44\x92\x6b\x6b\x43\x5d\xa3\x01\x61\xf1\x47\xf3\x4c\x4e\x13\x93\x5f\x5e\x54\xcc\x76\x3a\x99\xbc\x74\xa1\x4c\x9a\x21\x14\xaa\xf1\x4c\x0e\x1a\x2f\xf5\x1a\xb8\x22\x58\xfc\x4e\xaa\x4e\x7f\xf7\xd3\xc9\x24\xac\x9a\xf9\x6a\x08\x16\x8b\x17\x5c\x13\xd4\xa8\x71\x4d\x2e\x8b\xa3\xdd\x3b\x72\xf4\x5f\x23\xbd\x64\xf2\x62\xb7\x03\x87\x7a\x4d\x61\x9a\x5e\x3c\xec\x92\xb8\x85\x5f\xbb\xdd\x18\x48\x97\x07\x5e\x77\x49\xc5\x43\xf7\xa8\x8e\x10\x73\xd3\xc9\x1b\xa2\x69\xdd\x57\xc9\x55\xfc\x74\x49\x2d\xd0\x41\xc4\xfc\x1d\xfd\xf3\xe9\x7b\x06\xf8\x36\xc0\xe6\x61\x5e\x53\xd7\xa8\xcb\xcf\x00\x0a\xab\x1c\x09\x75\x28\x64\x7a\x29\x69\x85\x8d\x62\x28\x8c\x5e\xc9\x75\xe3\x30\xe0\xcf\x20\x94\x5f\x9c\xc4\x96\x17\x83\x93\xef\x21\x78\x8a\x5e\x01\x25\x3d\xfb\x58\xcc\xa2\xc3\x9a\x98\x5c\xf8\x44\x86\x02\x35\x3c\x53\x57\x9b\x4a\x28\x1b\x17\x18\xb4\x1a\xa5\x66\x42\xfc\x02\xa3\xd1\x5c\xda\xd1\x68\x0a\x33\xe9\x19\x82\x7c\xad\xfa\xbe\xf5\x4c\x1e\xb5\x0d\xad\x92\x5b\x9f\xb4\xfc\x08\x69\x73\x78\x9a\x94\xa4\x88\x29\x3e\x7f\x39\xbf\x36\xe9\x3d\x7c\x5f\x45\xc5\x51\x6d\x36\xe4\xe1\xe0\xae\x3e\x03\x53\x5b\xa3\x49\xb3\x07\xf4\xde\x14\x12\x99\xca\xa3\xf1\x92\x0f\x13\x59\x15\x13\x7a\x76\x4c\x17\x71\xd3\x47\x91\xfa\xae\x8c\x52\xe6\x35\xca\x81\xcf\x8a\x7a\x58\x3a\x6e\x21\xdc\x63\x64\x56\xf1\xf9\xad\xfb\x8e\x03\x70\x45\xd2\x75\x26\xd9\xa0\x6a\xc8\x67\x42\x1c\x53\xfe\x8e\xa1\x78\x66\x8f\x96\x0a\xb9\xda\x02\x61\x51\x1d\xdb\xf4\x6e\x3e\x1f\x8f\x3d\x31\xbc\xd0\xf6\xe7\x58\x69\x71\xd9\xfd\x5c\xe6\x80\x6e\xdd\xd4\xa4\x19\xd8\xb4\xb4\x5b\x8c\x79\x06\xbf\x19\x07\xf4\x3f\xd6\x56\xd1\x77\xb9\x39\x48\x93\x9f\xaf\xfd\x6b\x1a\xa9\xc3\x7f\xad\x98\x9c\x46\x96\x1b\x52\xdb\x4b\x40\xf8\xe7\xfa\xcf\x19\xac\xa4\xa2\x74\x0f\x3e\x2a\x24\x5b\xa0\x49\x4d\x58\x19\x77\x7e\x3c\xed\xdd\x58\x67\x36\xb2\x0c\xce\xa8\xa4\x22\x71\x66\xf8\x08\xe9\x87\x90\xa6\x5d\xa4\x75\xc7\x16\x6b\x15\xe5\xf8\x14\x00\x00\xff\xff\x68\x62\x57\x8b\x8b\x07\x00\x00")

func readmeTplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTpl,
		"readme.tpl",
	)
}

func readmeTpl() (*asset, error) {
	bytes, err := readmeTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tpl", size: 1931, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"readme.tpl": readmeTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"readme.tpl": {readmeTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
