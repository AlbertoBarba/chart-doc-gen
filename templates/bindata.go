// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// readme.tpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readmeTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xdf\x6f\x22\x37\x10\xc7\xdf\xfd\x57\x8c\x44\x1f\x02\x0a\xcb\x3b\x51\x2b\x45\x49\xab\x46\xa5\x55\x94\x90\x4a\x15\x42\xda\xc9\xee\xc0\xba\xf1\xda\x3e\x7b\x96\x1c\x42\xfc\xef\x27\xdb\xcb\xb2\x70\x89\xee\xee\xe5\xee\xde\xd8\x31\xf3\xeb\xfb\xf9\xce\x00\x76\x3b\xc8\xee\x9d\xf9\x9f\x0a\xce\x1e\x2b\xe3\xf8\x1f\xac\x09\xf6\x7b\x21\x16\xfd\xa7\x36\xba\xbc\xe8\x07\x9f\x1e\x66\xb0\xdf\x0f\x61\x7c\x52\xe5\x96\x7c\xe1\xa4\x65\x69\x74\xac\x33\x18\xc0\x7c\x76\x75\xfb\x70\x25\x44\x9e\xe7\x85\xd1\xde\x28\x12\xbf\x40\x45\xaa\x06\x47\xd6\x00\x96\x65\xac\xf0\x40\xd6\x78\xc9\xc6\x6d\x0f\xfd\xce\xc3\xa9\xe3\x49\x72\x63\x4b\xe4\xae\x9e\xd4\x9e\x51\xa9\x36\x4f\x11\x7a\x7a\xaf\x56\x1b\x9e\x84\xf0\x4d\x85\xae\x5b\x12\xc6\xfa\xb3\x7c\x6f\xb1\x88\xb2\xe4\x79\x1e\x57\xba\xd3\xec\x4c\xd9\x14\x61\x4d\x21\xe6\x95\xf4\x50\x84\x22\x50\x92\x55\x66\xeb\x4f\x24\xb9\xb6\x36\xd4\x35\x1a\x10\x16\x7f\x35\xcf\xe4\x34\x31\xf9\xe5\x45\xc5\x6c\xa7\x93\xc9\x4b\x17\xca\xa4\x19\x42\xa1\x1a\xcf\xe4\xa0\xf1\x52\xaf\x81\x2b\x82\xc5\x9f\xa4\xea\xf4\x77\x3f\x9d\x4c\xc2\xaa\x99\xaf\x86\x60\xb1\x78\xc1\x35\x41\x8d\x1a\xd7\xe4\xb2\x38\xda\xbd\x23\x47\x1f\x1a\xe9\x25\x93\x17\xbb\x1d\x38\xd4\x6b\x0a\xd3\xf4\xe2\x61\x97\xc4\x2d\xfc\xda\xed\xc6\x40\xba\x3c\xf0\xba\x4b\x2a\x1e\xba\x47\x75\x84\x98\x9b\x4e\xde\x10\x4d\xeb\xbe\x4a\xae\xe2\xa7\x4b\x6a\x81\x0e\x22\xe6\x6f\xe8\x9f\x4f\xdf\x32\xc0\xf7\x01\x36\x0f\xf3\x9a\xba\x46\x5d\x7e\x01\x50\x58\xe5\x48\xa8\x43\x21\xd3\x4b\x49\x2b\x6c\x14\x43\x61\xf4\x4a\xae\x1b\x87\x01\x7f\x06\xa1\xfc\xe2\x24\xb6\xbc\x18\x9c\x7c\x0f\xc1\x53\xf4\x0a\x28\xe9\xd9\xc7\x62\x16\x1d\xd6\xc4\xe4\xc2\x27\x32\x14\xa8\xe1\x99\xba\xda\x54\x42\xd9\xb8\xc0\xa0\xd5\x28\x35\x13\xe2\x37\x18\x8d\xe6\xd2\x8e\x46\x53\x98\x49\xcf\x10\xe4\x6b\xd5\xf7\xad\x67\xf2\xa8\x6d\x68\x95\xdc\xfa\xa4\xe5\x7b\x48\x9b\xc3\xd3\xa4\x24\x45\x4c\xf1\xf9\xeb\xf9\xb5\x49\x6f\xe1\xfb\x26\x2a\x8e\x6a\xb3\x21\x0f\x07\x77\xf5\x19\x98\xda\x1a\x4d\x9a\x3d\xa0\xf7\xa6\x90\xc8\x54\x1e\x8d\x97\x7c\x98\xc8\xaa\x98\xd0\xb3\x63\xba\x88\x9b\x3e\x8a\xd4\x77\x65\x94\x32\xaf\x51\x0e\x7c\x56\xd4\xc3\xd2\x71\x0b\xe1\x1e\x23\xb3\x3a\x4a\x73\x62\xbf\xbc\x37\x02\x57\x24\x5d\x67\x93\x0d\xaa\x86\x7c\x26\xc4\x31\xe7\xdf\x18\x8a\x87\xf6\x68\xa9\x90\xab\x2d\x10\x16\xd5\xb1\x51\xef\xea\xf3\xf1\xd8\x13\xc3\x0b\x6d\x7f\x8d\x95\x16\x97\xdd\xcf\x65\x0e\xe8\xd6\x4d\x4d\x9a\x81\x4d\xcb\xbb\x05\x99\x67\xf0\x87\x71\x40\x1f\xb1\xb6\x8a\x7e\xc8\xd5\x41\x9a\xfc\x7c\xed\xdf\xd3\x48\x9d\x01\xae\x15\x93\xd3\xc8\x72\x43\x6a\x7b\x09\x08\xff\x5d\xff\x3d\x83\x95\x54\x94\x2e\xc2\x47\x85\x64\x8b\x34\xa9\x09\x2b\xe3\xce\xcf\xa7\xbd\x1c\xeb\xcc\x46\x96\xc1\x1b\x95\x54\x24\xce\x2c\x1f\x21\xfd\x14\xd2\xb4\x8b\xb4\xee\xd8\x62\xad\xa2\x1c\x9f\x02\x00\x00\xff\xff\xe4\x8b\x19\xab\x8d\x07\x00\x00")

func readmeTplBytes() ([]byte, error) {
	return bindataRead(
		_readmeTpl,
		"readme.tpl",
	)
}

func readmeTpl() (*asset, error) {
	bytes, err := readmeTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.tpl", size: 1933, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"readme.tpl": readmeTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"readme.tpl": {readmeTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
